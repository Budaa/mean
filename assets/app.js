var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc",function(t,e){window.localStorage.token&&e.setXAuthHeader(window.localStorage.token).then(function(e){t.$emit("login",e.data)}),t.$on("login",function(e,o){t.currentUser=o}),t.logout=function(){delete t.currentUser,delete t.posts,delete window.localStorage.token,e.logout()}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(t,e,o){t.login=function(n,r){e.login(n,r).then(function(e){t.$emit("login",e.data),o.path("/")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){t.addPost=function(){t.postBody&&e.create({username:"pbuderaski",body:t.postBody}).success(function(e){t.posts.unshift(e),t.postBody=null})},e.fetch().success(function(e){t.posts=e}).error(function(){t.postserr="Pleae log in!"})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(o,n){e.createUser(o,n).then(function(e){t.$emit("login",e.data)},function(e){t.registerError=e.data,t.username="",t.password=""})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http","$location",function(t,e){var o=this;o.getUser=function(){return t.get("/api/users")},o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(e){return window.localStorage.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,o.getUser()})},o.createUser=function(e,n){return t.post("/api/users",{username:e,password:n}).then(function(){return o.login(e,n)})},o.logout=function(){t.defaults.headers.common["X-Auth"]="",e.path("/login")},o.setXAuthHeader=function(e){return t.defaults.headers.common["X-Auth"]=e,o.getUser()}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIlVzZXJTdmMiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJ0b2tlbiIsInNldFhBdXRoSGVhZGVyIiwidGhlbiIsInVzZXIiLCIkZW1pdCIsImRhdGEiLCIkb24iLCJfIiwiY3VycmVudFVzZXIiLCJsb2dvdXQiLCJwb3N0cyIsIiRsb2NhdGlvbiIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInJlc3BvbnNlIiwicGF0aCIsIlBvc3RzU3ZjIiwiYWRkUG9zdCIsInBvc3RCb2R5IiwiY3JlYXRlIiwiYm9keSIsInN1Y2Nlc3MiLCJwb3N0IiwidW5zaGlmdCIsImZldGNoIiwiZXJyb3IiLCJwb3N0c2VyciIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNyZWF0ZVVzZXIiLCJlcnIiLCJyZWdpc3RlckVycm9yIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJzdmMiLCJnZXRVc2VyIiwidmFsIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiaGVhZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLE9BQ0EsV0NEQUQsU0FBQUMsT0FBQSxPQUNBQyxXQUFBLG1CQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBQyxHQUNBQyxPQUFBQyxhQUFBQyxPQUNBSCxFQUFBSSxlQUFBSCxPQUFBQyxhQUFBQyxPQUNBRSxLQUFBLFNBQUFDLEdBQ0FQLEVBQUFRLE1BQUEsUUFBQUQsRUFBQUUsUUFHQVQsRUFBQVUsSUFBQSxRQUFBLFNBQUFDLEVBQUFKLEdBQ0FQLEVBQUFZLFlBQUFMLElBRUFQLEVBQUFhLE9BQUEsaUJBQ0FiLEdBQUFZLGtCQUNBWixHQUFBYyxZQUNBWixRQUFBQyxhQUFBQyxNQUNBSCxFQUFBWSxhQ2ZBaEIsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFlBQUEsU0FBQUMsRUFBQUMsRUFBQWMsR0FDQWYsRUFBQWdCLE1BQUEsU0FBQUMsRUFBQUMsR0FDQWpCLEVBQUFlLE1BQUFDLEVBQUFDLEdBQ0FaLEtBQUEsU0FBQWEsR0FDQW5CLEVBQUFRLE1BQUEsUUFBQVcsRUFBQVYsTUFDQU0sRUFBQUssS0FBQSxXQ05BdkIsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFxQixHQUNBckIsRUFBQXNCLFFBQUEsV0FDQXRCLEVBQUF1QixVQUNBRixFQUFBRyxRQUNBUCxTQUFBLGFBQ0FRLEtBQUF6QixFQUFBdUIsV0FFQUcsUUFBQSxTQUFBQyxHQUNBM0IsRUFBQWMsTUFBQWMsUUFBQUQsR0FDQTNCLEVBQUF1QixTQUFBLFFBS0FGLEVBQUFRLFFBQUFILFFBQUEsU0FBQVosR0FDQWQsRUFBQWMsTUFBQUEsSUFDQWdCLE1BQUEsV0FDQTlCLEVBQUErQixTQUFBLHFCQ2xCQWxDLFFBQUFDLE9BQUEsT0FDQWtDLFFBQUEsWUFBQSxRQUFBLFNBQUFDLEdBQ0FDLEtBQUFMLE1BQUEsV0FDQSxNQUFBSSxHQUFBRSxJQUFBLGVBRUFELEtBQUFWLE9BQUEsU0FBQUcsR0FDQSxNQUFBTSxHQUFBTixLQUFBLGFBQUFBLE9DTkE5QixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsZ0JBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFDLEdBQ0FELEVBQUFvQyxTQUFBLFNBQUFuQixFQUFBQyxHQUNBakIsRUFBQW9DLFdBQUFwQixFQUFBQyxHQUNBWixLQUFBLFNBQUFDLEdBQ0FQLEVBQUFRLE1BQUEsUUFBQUQsRUFBQUUsT0FDQSxTQUFBNkIsR0FDQXRDLEVBQUF1QyxjQUFBRCxFQUFBN0IsS0FDQVQsRUFBQWlCLFNBQUEsR0FDQWpCLEVBQUFrQixTQUFBLFNDVEFyQixRQUFBQyxPQUFBLE9BQ0EwQyxRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FBQTNDLFdBQUEsWUFBQTRDLFlBQUEsZUFDQUQsS0FBQSxhQUFBM0MsV0FBQSxlQUFBNEMsWUFBQSxrQkFDQUQsS0FBQSxVQUFBM0MsV0FBQSxZQUFBNEMsWUFBQSxrQkNMQTlDLFFBQUFDLE9BQUEsT0FDQWtDLFFBQUEsV0FBQSxRQUFBLFlBQUEsU0FBQUMsRUFBQWxCLEdBQ0EsR0FBQTZCLEdBQUFWLElBQ0FVLEdBQUFDLFFBQUEsV0FDQSxNQUFBWixHQUFBRSxJQUFBLGVBR0FTLEVBQUE1QixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQWUsR0FBQU4sS0FBQSxpQkFDQVYsU0FBQUEsRUFDQUMsU0FBQUEsSUFDQVosS0FBQSxTQUFBd0MsR0FHQSxNQUZBNUMsUUFBQUMsYUFBQUMsTUFBQTBDLEVBQUFyQyxLQUNBd0IsRUFBQWMsU0FBQUMsUUFBQUMsT0FBQSxVQUFBSCxFQUFBckMsS0FDQW1DLEVBQUFDLGFBSUFELEVBQUFQLFdBQUEsU0FBQXBCLEVBQUFDLEdBQ0EsTUFBQWUsR0FBQU4sS0FBQSxjQUNBVixTQUFBQSxFQUNBQyxTQUFBQSxJQUNBWixLQUFBLFdBQ0EsTUFBQXNDLEdBQUE1QixNQUFBQyxFQUFBQyxNQUlBMEIsRUFBQS9CLE9BQUEsV0FDQW9CLEVBQUFjLFNBQUFDLFFBQUFDLE9BQUEsVUFBQSxHQUNBbEMsRUFBQUssS0FBQSxXQUdBd0IsRUFBQXZDLGVBQUEsU0FBQTZDLEdBRUEsTUFEQWpCLEdBQUFjLFNBQUFDLFFBQUFDLE9BQUEsVUFBQUMsRUFDQU4sRUFBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG5cdCduZ1JvdXRlJ1xuXSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBbJyRzY29wZScsICdVc2VyU3ZjJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU3ZjKXtcblx0aWYod2luZG93LmxvY2FsU3RvcmFnZS50b2tlbikge1xuXHRcdFVzZXJTdmMuc2V0WEF1dGhIZWFkZXIod2luZG93LmxvY2FsU3RvcmFnZS50b2tlbilcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHVzZXIpe1xuXHRcdFx0XHQkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlci5kYXRhKVxuXHRcdFx0fSlcblx0fVxuXHQkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uKF8sIHVzZXIpIHtcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG5cdH0pXG5cdCRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcblx0XHRkZWxldGUgJHNjb3BlLmN1cnJlbnRVc2VyXG5cdFx0ZGVsZXRlICRzY29wZS5wb3N0c1xuXHRcdGRlbGV0ZSB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuXG5cdFx0VXNlclN2Yy5sb2dvdXQoKVxuXHR9XG59XSlcblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgWyckc2NvcGUnLCAnVXNlclN2YycsICckbG9jYXRpb24nLCBmdW5jdGlvbigkc2NvcGUsIFVzZXJTdmMsICRsb2NhdGlvbil7XG5cdCRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHRcdFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRcdFx0JHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpXG5cdFx0XHRcdCRsb2NhdGlvbi5wYXRoKCcvJylcblx0XHRcdH0pXG5cdH1cbn1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgUG9zdHNTdmMpe1xuXHQkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCRzY29wZS5wb3N0Qm9keSkge1xuXHRcdFx0UG9zdHNTdmMuY3JlYXRlKHtcblx0XHRcdFx0dXNlcm5hbWU6ICdwYnVkZXJhc2tpJyxcblx0XHRcdFx0Ym9keTogJHNjb3BlLnBvc3RCb2R5XG5cblx0XHRcdH0pLnN1Y2Nlc3MoZnVuY3Rpb24ocG9zdCkge1xuXHRcdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuXHRcdFx0XHQkc2NvcGUucG9zdEJvZHkgPSBudWxsXG5cdFx0XHR9KVxuXHRcdH1cblx0fVxuXG5cdFBvc3RzU3ZjLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbihwb3N0cykge1xuXHRcdCRzY29wZS5wb3N0cyA9IHBvc3RzXG5cdH0pLmVycm9yKGZ1bmN0aW9uKCl7XG5cdFx0JHNjb3BlLnBvc3RzZXJyID0gXCJQbGVhZSBsb2cgaW4hXCJcblx0fSlcbn0pXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbigkaHR0cCl7XG5cdFx0dGhpcy5mZXRjaCA9IGZ1bmN0aW9uKCkgeyBcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxuXHRcdH1cblx0XHR0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3QpIHtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdClcblx0XHR9XG5cdH0pXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgVXNlclN2Yyl7XG5cdCRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCl7XG5cdFx0VXNlclN2Yy5jcmVhdGVVc2VyKHVzZXJuYW1lLCBwYXNzd29yZClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcblx0XHRcdFx0JHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIuZGF0YSlcblx0XHR9LCBmdW5jdGlvbihlcnIpIHtcblx0XHRcdCRzY29wZS5yZWdpc3RlckVycm9yID0gZXJyLmRhdGFcblx0XHRcdCRzY29wZS51c2VybmFtZSA9ICcnXG5cdFx0XHQkc2NvcGUucGFzc3dvcmQgPSAnJ1xuXHRcdH0pXG5cdH0gXG59KVxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuXHRcdCRyb3V0ZVByb3ZpZGVyXG5cdFx0LndoZW4oJy8nLCB7IGNvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLCB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnIH0pXG5cdFx0LndoZW4oJy9yZWdpc3RlcicsIHsgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCcgfSlcblx0XHQud2hlbignL2xvZ2luJywgeyBjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJyB9KVxuXHRcdFxuXHR9KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbiAoJGh0dHAsICRsb2NhdGlvbikge1xuXHR2YXIgc3ZjID0gdGhpc1xuXHRzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJylcblx0fVxuXG5cdHN2Yy5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcblx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSxcblx0XHRcdHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS50b2tlbiA9IHZhbC5kYXRhXG5cdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YVxuXHRcdFx0cmV0dXJuIHN2Yy5nZXRVc2VyKClcblx0XHR9KVxuXHR9XG5cblx0c3ZjLmNyZWF0ZVVzZXIgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcblx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSxcblx0XHRcdHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgXHRcdHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgIFx0fSlcblx0fVxuXG5cdHN2Yy5sb2dvdXQgPSBmdW5jdGlvbigpe1xuXHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9ICcnXG5cdFx0JGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpXG5cdH1cblxuXHRzdmMuc2V0WEF1dGhIZWFkZXIgPSBmdW5jdGlvbihoZWFkZXIpe1xuXHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IGhlYWRlclxuXHRcdHJldHVybiBzdmMuZ2V0VXNlcigpXG5cdH1cbn0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
