var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc",function(e,t){window.localStorage.token&&t.setXAuthHeader(window.localStorage.token).then(function(t){e.$emit("login",t.data)}),e.$on("login",function(t,o){e.currentUser=o}),e.logout=function(){delete e.currentUser,delete e.post,delete window.localStorage.token,t.logout()}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location","$route",function(e,t,o,n){e.login=function(r,s){t.login(r,s).then(function(t){delete e.loginError,e.$emit("login",t.data),o.path("/"),n.reload()},function(){e.loginError="Wrong username or password"})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(e,t){e.addPost=function(){e.postBody&&t.create({username:e.currentUser._id,body:e.postBody}).success(function(t){t.username={username:e.currentUser.username},e.posts.unshift(t),e.postBody=null})},e.removePost=function(o,n){console.log(o),t.deletePost({id:o}).success(function(){alert("Post has been deleted"),e.posts.splice(n,1)}).error(function(e){console.log(e)})},t.fetch().success(function(t){e.posts=t,console.log(e.posts)}).error(function(){e.postserr="Please log in!"})}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetch=function(t){return e.get("/api/posts",t)},this.create=function(t){return e.post("/api/posts",t)},this.deletePost=function(t){return e.put("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(e,t,o){e.register=function(n,r,s){return n?s==r&&s?void t.createUser(n,r).then(function(t){e.$emit("login",t.data),o.path("/")},function(t){e.registerError=t.data,e.username="",e.password="",e.password2=""}):(e.registerError="Passwords don't match",null):(e.registerError="Please, select your username.",null)}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http","$location",function(e,t){var o=this;o.getUser=function(){return e.get("/api/users")},o.login=function(t,n){return e.post("/api/sessions",{username:t,password:n}).then(function(t){return window.localStorage.token=t.data,e.defaults.headers.common["X-Auth"]=t.data,o.getUser()})},o.createUser=function(t,n){return e.post("/api/users",{username:t,password:n}).then(function(){return o.login(t,n)})},o.logout=function(){e.defaults.headers.common["X-Auth"]="",t.path("/login")},o.setXAuthHeader=function(t){return e.defaults.headers.common["X-Auth"]=t,o.getUser()}}]);
//# sourceMappingURL=data:application/json;base64,
